#version 460

layout(local_size_x = 256) in;

layout(push_constant) uniform constants {
	uint drawCount;
};

struct DrawCommand {
	uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
	uint objectID;
	uint batchID;
};

layout(set = 0, binding = 0)  buffer InstanceBuffer {
	DrawCommand draws[];
} drawBuffer;

struct GPUInstance {
	uint objectID;
	uint batchID;
};

layout(set = 0, binding = 1) readonly buffer InstanceBuffer2 {
	GPUInstance instances[];
} instanceBuffer;

layout(set = 0, binding = 2)  buffer InstanceBuffer3 {
	uint ids[];
} finalInstanceBuffer;

layout(set = 0, binding = 3) buffer CountBuffer {
	uint counts[];
} finalCountBuffer;

void main() {
	uint gid = gl_GlobalInvocationID.x;
	if (gid < drawCount) {
		uint objectId = instanceBuffer.instances[gid].objectID;
		uint batchIndex = instanceBuffer.instances[gid].batchID;
		if (drawBuffer.draws[batchIndex].instanceCount == 0)
			atomicAdd(finalCountBuffer.counts[batchIndex], 1);
		uint countIndex = atomicAdd(drawBuffer.draws[batchIndex].instanceCount, 1);
		uint instanceIndex = drawBuffer.draws[batchIndex].firstInstance + countIndex;
		finalInstanceBuffer.ids[instanceIndex] = objectId;
	}
}